# -*- coding: utf-8 -*-
"""face_detection-01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tx_OU103Mtazc2xQuWnR20uz2maBIRD1
"""

# -*- coding: utf-8 -*-
"""face_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/134QoWuE7pGz1D4KUDlsIqBgv2BH4r04H

Import required Python libraries
"""

import imutils
import numpy as np
import cv2
from google.colab import files

"""Upload an image file"""

uploaded = files.upload()
image_file = list(uploaded.keys())[0]

"""Read and resize the image"""

image = cv2.imread(image_file)
# resize it to have a maximum width of 400 pixels
image = imutils.resize(image, width=400)
(h, w) = image.shape[:2]

"""OpenCVâ€™s deep learning face detector is based on the Single Shot Detector (SSD) framework with a ResNet base network. The network is defined and trained using the [Caffe Deep Learning framework](https://caffe.berkeleyvision.org/)

Download the pre-trained face detection model, consisting of two files:

- The network definition (deploy.prototxt)
- The learned weights (res10_300x300_ssd_iter_140000.caffemodel)
"""

!wget -q -N https://raw.githubusercontent.com/opencv/opencv/master/samples/dnn/face_detector/deploy.prototxt
!wget -q -N https://raw.githubusercontent.com/opencv/opencv_3rdparty/dnn_samples_face_detector_20170830/res10_300x300_ssd_iter_140000.caffemodel

"""Load the pre-trained face detection network model from disk"""

prototxt = 'deploy.prototxt'
model = 'res10_300x300_ssd_iter_140000.caffemodel'
net = cv2.dnn.readNetFromCaffe(prototxt, model)

"""Use the [dnn.blobFromImage](https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/) function to construct an input blob by resizing the image to a fixed 300x300 pixels and then normalizing it.

"""

# resize it to have a maximum width of 400 pixels
image = imutils.resize(image, width=400)
blob = cv2.dnn.blobFromImage(cv2.resize(image, (300, 300)), 1.0, (300, 330), (104.0, 177.0, 123.0))

"""
Pass the blob through the neural network and obtain the detections and predictions."""

net.setInput(blob)
detections = net.forward()

"""Check if a face is detected"""

face_detected = False  # Initialize a flag to track if a face is detected

for i in range(0, detections.shape[2]):
    # extract the confidence (i.e., probability) associated with the prediction
    confidence = detections[0, 0, i, 2]

    # filter out weak detections by ensuring the `confidence` is
    # greater than the minimum confidence threshold
    if confidence > 0.5:
        face_detected = True  # Set the flag to indicate a face is detected
        break

# Return 1 if face detected, 0 otherwise
if face_detected:
    print(1)
else:
    print(0)

